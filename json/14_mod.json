[{"severity": ["high"], "snyk_url": ["https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSQUAREGOJOSECIPHER-451468"], "references": ["GitHub Commit:https://github.com/square/go-jose/commit/789a4c4bd4c118f7564954f441b29c153ccd6a96", "OSS security Advisory:https://www.openwall.com/lists/oss-security/2016/11/03/1"], "snyk_cwes": ["CWE-190"], "vertex_label": ["SCVE"], "description": ["## Overview\n[github.com/square/go-jose/cipher](https://github.com/square/go-jose) is an implementation of JOSE standards (JWE, JWS, JWT) in Go.\n\nAffected versions of this package are vulnerable to Integer Overflow. An integer overflow could lead to authentication bypass for CBC-HMAC encrypted ciphertexts on 32-bit architectures.\n## Remediation\nUpgrade `github.com/square/go-jose/cipher` to version 1.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/square/go-jose/commit/789a4c4bd4c118f7564954f441b29c153ccd6a96)\n- [OSS security Advisory](https://www.openwall.com/lists/oss-security/2016/11/03/1)\n"], "cvss_scores": [7.5], "snyk_cve_ids": ["CVE-2016-9123"], "modified_date": ["20201105"], "title": ["Integer Overflow"], "snyk_ecosystem": ["golang"], "malicious": [false], "snyk_cvss_v3": ["CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"], "vuln_commit_date_rules": ["<#2016-09-03T04:47:34Z"], "package_name": ["github.com/square/go-jose/cipher"], "fixed_in": ["1.0.5"], "snyk_vuln_id": ["SNYK-GOLANG-GITHUBCOMSQUAREGOJOSECIPHER-451468"], "snyk_pvt_vulnerability": [false], "module_name": ["github.com/square/go-jose"], "exploit": ["Not Defined"], "patch_exists": [""], "fixable": [true], "versions": ["1.0.3", "1.0.0", "1.0.2", "1.0.1", "1.0.4"]}, {"severity": ["medium"], "snyk_url": ["https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMASTAXIEBEEGOSESSION-568067"], "references": ["GitHub Issue:https://github.com/astaxie/beego/issues/3983"], "snyk_cwes": ["CWE-79"], "vertex_label": ["SCVE"], "description": ["## Overview\n[github.com/astaxie/beego/session](http://github.com/astaxie/beego) is an open-source, high-performance web framework for the Go programming language.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). User input is not strictly checked globally.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\n\n\u05bfInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `github.com/astaxie/beego/session` to version 1.12.2 or higher.\n## References\n- [GitHub Issue](https://github.com/astaxie/beego/issues/3983)\n"], "cvss_scores": [6.5], "modified_date": ["20201105"], "title": ["Cross-site Scripting (XSS)"], "snyk_ecosystem": ["golang"], "malicious": [false], "snyk_cvss_v3": ["CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N"], "vuln_commit_date_rules": ["<#2020-06-30T15:25:29Z"], "package_name": ["github.com/astaxie/beego/session"], "fixed_in": ["1.12.2"], "snyk_vuln_id": ["SNYK-GOLANG-GITHUBCOMASTAXIEBEEGOSESSION-568067"], "snyk_pvt_vulnerability": [true], "module_name": ["github.com/astaxie/beego"], "exploit": ["Not Defined"], "patch_exists": [""], "fixable": [true], "versions": ["1.4.1", "1.7.0", "1.9.0", "0.8.0", "1.12.1", "1.6.0", "1.5.0", "1.10.0", "1.8.0", "0.6.0", "1.8.1", "1.2.0", "1.10.1", "1.4.2", "1.11.1", "1.7.2", "1.4.0", "1.11.0", "1.8.3", "1.0.1", "0.7.0", "0.9.0", "1.9.2", "1.4.3", "1.12.0", "1.8.2", "1.7.1", "1.6.1", "1.3.0"]}, {"severity": ["critical"], "snyk_url": ["https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGOLANGGDDOGOSRC-50079"], "references": ["GitHub Commit:https://github.com/golang/gddo/commit/daffe1f90ec57f8ed69464f9094753fc6452e983", "Google Group:https://groups.google.com/forum/%23%21msg/golang-announce/4rpTbfzYB1k/no6MEwlQAwAJ"], "snyk_cwes": ["CWE-22"], "vertex_label": ["SCVE"], "description": ["## Overview\n[`github.com/golang/gddo/gosrc`](https://github.com/golang/gddo) is the source for http://godoc.org/ .\n\nAffected versions of the package are vulnerable to Directory Traversal. An attacker could use specially crafted `<go-import>` tags in packages being fetched by gddo to cause a directory traversal and remote code execution.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with dot-dot-slash (../) sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\n\n\n## Remediation\nUpgrade `github.com/golang/gddo/gosrc` to version daffe1f90ec57f8ed69464f9094753fc6452e983 or higher.\n\n## References\n- [Google Group](https://groups.google.com/forum/#!msg/golang-announce/4rpTbfzYB1k/no6MEwlQAwAJ)\n- [GitHub Commit](https://github.com/golang/gddo/commit/daffe1f90ec57f8ed69464f9094753fc6452e983)\n"], "cvss_scores": [9.8], "snyk_cve_ids": ["CVE-2018-12976"], "modified_date": ["20201105"], "title": ["Directory Traversal"], "snyk_ecosystem": ["golang"], "malicious": [false], "snyk_cvss_v3": ["CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"], "vuln_commit_date_rules": [">=#2014-02-13T05:02:27Z&<#2018-07-03T17:44:36Z"], "package_name": ["github.com/golang/gddo/gosrc"], "snyk_vuln_id": ["SNYK-GOLANG-GITHUBCOMGOLANGGDDOGOSRC-50079"], "snyk_pvt_vulnerability": [false], "module_name": ["github.com/golang/gddo"], "exploit": ["Not Defined"], "patch_exists": [""], "fixable": [""], "versions": []}, {"severity": ["high"], "snyk_url": ["https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMHASHICORPNOMADCLIENTALLOCRUNNERTASKRUNNERTEMPLATE-1020824"], "references": ["GitHub Issue:https://github.com/hashicorp/nomad/issues/9129", "GitHub PR:https://github.com/hashicorp/nomad/pull/9139"], "snyk_cwes": ["CWE-264"], "vertex_label": ["SCVE"], "description": ["## Overview\n[github.com/hashicorp/nomad/client/allocrunner/taskrunner/template](https://www.nomadproject.io/) is a workload orchestrator that can deploy a mix of microservice, batch, containerized, and non-containerized applications\n\nAffected versions of this package are vulnerable to Privilege Escalation. A specially crafted Nomad jobspec can be used to escape the client file sandbox configuration.\n## Remediation\nUpgrade `github.com/hashicorp/nomad/client/allocrunner/taskrunner/template` to version 0.10.6, 0.11.5, 0.12.6 or higher.\n## References\n- [GitHub Issue](https://github.com/hashicorp/nomad/issues/9129)\n- [GitHub PR](https://github.com/hashicorp/nomad/pull/9139)\n"], "cvss_scores": [7.1], "snyk_cve_ids": ["CVE-2020-27195"], "modified_date": ["20201105"], "title": ["Privilege Escalation"], "snyk_ecosystem": ["golang"], "malicious": [false], "snyk_cvss_v3": ["CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:L"], "vuln_commit_date_rules": [""], "package_name": ["github.com/hashicorp/nomad/client/allocrunner/taskrunner/template"], "fixed_in": ["0.10.6", "0.11.5", "0.12.6"], "snyk_vuln_id": ["SNYK-GOLANG-GITHUBCOMHASHICORPNOMADCLIENTALLOCRUNNERTASKRUNNERTEMPLATE-1020824"], "snyk_pvt_vulnerability": [false], "module_name": ["github.com/hashicorp/nomad"], "exploit": ["Not Defined"], "patch_exists": [""], "fixable": [true], "versions": ["0.10.4", "0.11.0", "0.9.2", "0.12.0", "0.11.2", "0.10.3", "0.10.2-rc1", "0.10.0-connect1", "0.9.4", "0.12.4-rc1", "0.9.6", "0.12.5", "0.10.1", "0.12.2", "0.10.0-beta1", "0.9.2-rc1", "0.12.1", "0.11.1", "0.10.5", "0.12.4", "0.11.4", "0.11.3", "0.10.2", "0.9.5", "0.9.1", "0.9.4-rc1", "0.10.4-rc1", "0.10.0", "0.10.0-rc1", "0.9.1-rc1", "0.9.7", "0.12.3", "0.9.3", "0.9.0"]}, {"severity": ["low"], "snyk_url": ["https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMROBOTSANDPENCILSGOSAML-575719"], "references": ["GitHub PR:https://github.com/RobotsAndPencils/go-saml/pull/38"], "snyk_cwes": ["CWE-310"], "vertex_label": ["SCVE"], "description": ["## Overview\n[github.com/RobotsAndPencils/go-saml](https://github.com/RobotsAndPencils/go-saml) is a SAML client library written in Go.\n\nAffected versions of this package are vulnerable to Cryptographic Issues. It signs `AuthnRequests` and `AuthnResponses` with SHA256.\n## Remediation\nThere is no fixed version for `github.com/RobotsAndPencils/go-saml`.\n## References\n- [GitHub PR](https://github.com/RobotsAndPencils/go-saml/pull/38)\n"], "cvss_scores": [3.7], "modified_date": ["20201105"], "title": ["Cryptographic Issues"], "snyk_ecosystem": ["golang"], "malicious": [false], "snyk_cvss_v3": ["CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N"], "vuln_commit_date_rules": ["*"], "package_name": ["github.com/RobotsAndPencils/go-saml"], "snyk_vuln_id": ["SNYK-GOLANG-GITHUBCOMROBOTSANDPENCILSGOSAML-575719"], "snyk_pvt_vulnerability": [true], "module_name": ["github.com/RobotsAndPencils/go-saml"], "exploit": ["Not Defined"], "patch_exists": [""], "fixable": [""], "versions": []}, {"severity": ["medium"], "snyk_url": ["https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMIPFSGOIPFSCORE-1035518"], "references": ["Ipfs Blog:https://blog.ipfs.io/2020-10-30-dht-hardening/"], "snyk_cwes": ["CWE-284"], "vertex_label": ["SCVE"], "description": ["## Overview\n[github.com/ipfs/go-ipfs/core](https://godoc.org/github.com/ipfs/go-ipfs/core) is a Package that implements the IpfsNode object and related methods.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. An attacker can generate ephemeral identities (Sybils) and leverage the IPFS connection management reputation system to poison other nodes routing tables, eclipsing the nodes that are the target of the attack from the rest of the network.\n## Remediation\nUpgrade `github.com/ipfs/go-ipfs/core` to version 0.7.0 or higher.\n## References\n- [Ipfs Blog](https://blog.ipfs.io/2020-10-30-dht-hardening/)\n"], "cvss_scores": [5.9], "snyk_cve_ids": ["CVE-2020-10937"], "modified_date": ["20201105"], "title": ["Access Restriction Bypass"], "snyk_ecosystem": ["golang"], "malicious": [false], "snyk_cvss_v3": ["CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H"], "vuln_commit_date_rules": ["<#2020-09-22T20:41:25Z"], "package_name": ["github.com/ipfs/go-ipfs/core"], "fixed_in": ["0.7.0"], "snyk_vuln_id": ["SNYK-GOLANG-GITHUBCOMIPFSGOIPFSCORE-1035518"], "snyk_pvt_vulnerability": [false], "module_name": ["github.com/ipfs/go-ipfs"], "exploit": ["Not Defined"], "patch_exists": [""], "fixable": [true], "versions": ["0.4.19-rc2", "0.4.20-rc1", "0.5.1", "0.5.0", "0.4.1-rc1", "floodsub-1", "0.3.2", "0.3.10", "0.6.0", "0.3.9", "0.4.11-rc2", "0.3.8", "0.7.0-rc2", "0.4.1", "0.4.17", "0.4.19-rc1", "0.4.8-rc1", "0.4.18-rc1", "0.4.18", "0.4.21-rc1", "0.6.0-rc5", "0.4.0-rc1", "0.4.8", "0.4.0", "0.2.3", "0.6.0-rc2", "0.4.5-rc4", "0.4.5-pre1", "0.3.11", "0.4.13-rc1", "0.4.21-rc2", "0.7.0-rc1", "0.4.4", "0.4.9", "0.3.6", "0.4.5-rc1", "0.4.20", "0.4.11-rc1", "0.3.11-rc1", "0.4.15", "0.3.5", "0.4.21", "0.2.2", "0.4.3-rc4", "0.4.9-rc2", "0.6.0-rc3", "0.4.6-rc1", "0.4.13", "0.4.19", "0.4.21-rc3", "0.4.5-pre2", "0.3.7", "0.5.0-rc4", "sharding-pre", "0.4.14-rc1", "0.4.22", "floodsub-0", "0.4.11-pre", "0.4.10", "0.4.3-rc2", "0.4.3-de", "0.5.0-rc3", "0.4.16", "0.4.12-rc2", "0.4.11", "0.5.0-rc2", "0.4.9-rc1", "floodsub-2", "0.4.18-rc2", "0.4.15-rc1", "0.4.5", "0.4.12-rc1", "0.4.20-rc2", "0.4.12", "0.4.23", "0.6.0-rc7", "0.3.3", "0.5.0-rc1", "0.5.0-de", "0.3.4", "0.4.16-rc2", "0.4.17-rc1", "0.4.6", "0.4.23-rc1", "0.4.7", "0.6.0-rc1", "0.4.14-rc3", "0.4.0-rc2", "0.4.16-rc3", "0.4.16-rc1", "0.4.23-rc2", "0.4.3-rc1", "0.4.3-rc3", "0.6.0-rc4", "0.4.2", "0.4.7-rc1", "0.6.0-rc6", "0.4.3", "0.4.5-rc2", "0.2.3-buildfails", "0.3.8-de", "0.4.0-rc3", "0.4.22-rc1", "0.2.2-buildfails", "0.3.3-buildfails", "0.4.14-rc2", "0.4.5-rc3", "0.4.14", "0.4.10-rc1"]}, {"severity": ["medium"], "snyk_url": ["https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMDOCKERDOCKER-50008"], "references": ["Docker Security:https://groups.google.com/forum/%23%21msg/docker-user/nFAz-B-n4Bw/0wr3wvLsnUwJ", "RedHat CVE Database:https://access.redhat.com/security/cve/cve-2014-9358"], "snyk_cwes": ["CWE-22"], "vertex_label": ["SCVE"], "description": ["## Overview\r\nAffected version of [`github.com/docker/docker`](https://github.com/docker/docker) are vulnerable to Directory Traversal attacks.  \r\nDocker before 1.3.3 does not properly validate image IDs, which allows remote attackers to conduct path traversal attacks and spoof repositories via a crafted image in a (1) docker load operation or (2) registry communications.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with dot-dot-slash (../) sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-9358)\r\n- [Docker Security](https://groups.google.com/forum/#%21msg/docker-user/nFAz-B-n4Bw/0wr3wvLsnUwJ)\r\n- [Redhat Security Advisory](https://access.redhat.com/security/cve/cve-2014-9358)"], "cvss_scores": [6.5], "snyk_cve_ids": ["CVE-2014-9358"], "modified_date": ["20201105"], "title": ["Directory Traversal"], "snyk_ecosystem": ["golang"], "malicious": [false], "snyk_cvss_v3": ["CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"], "vuln_commit_date_rules": ["<#2014-12-09T19:56:16Z"], "package_name": ["github.com/docker/docker"], "fixed_in": ["1.3.2"], "snyk_vuln_id": ["SNYK-GOLANG-GITHUBCOMDOCKERDOCKER-50008"], "snyk_pvt_vulnerability": [false], "module_name": ["github.com/docker/docker"], "exploit": ["Not Defined"], "patch_exists": [""], "fixable": [true], "versions": ["upstream/0.1.1", "docs-v1.12.0-rc4-2016-07-15", "0.8.0", "0.6.3", "0.1.5", "0.1.4", "1.3.0", "1.0.0", "0.12.0", "0.7.5", "0.7.0-rc3", "0.7.0-rc1", "0.3.2", "0.1.3", "0.11.1", "0.7.6", "0.7.0-rc4", "0.7.0-rc2", "0.4.6", "xdocs-v1.10-28-mar-2016", "docs-v1.12.0-2016-08-09", "docs-v1.12.0-2016-07-29", "1.0.1", "0.5.2", "0.10.0", "0.7.0-rc5", "0.6.5", "0.4.2", "0.7.4", "0.4.7", "1.3.1", "1.1.0", "0.9.1", "0.9.0", "0.7.2", "0.6.6", "0.6.4", "0.6.1", "0.5.1", "0.5.0", "0.4.1", "0.4.0", "0.3.0", "0.1.7", "docs-v1.12.1-2016-08-12", "upstream/0.1.3", "upstream/0.1.2", "upstream/0.1.4", "1.1.2", "0.7.0", "0.6.2", "0.2.1", "0.11.0", "0.4.5", "1.1.1", "0.7.0-rc7", "0.4.3", "0.2.2", "0.1.6", "0.1.1", "1.2.0", "0.4.4", "0.3.3", "0.2.0", "0.7.3", "0.7.0-rc6", "0.6.0", "0.1.2", "docs-v1.11.2-2016-06-10", "xdocs-v1.10-09-05-2016", "builder/1", "builder/2", "0.8.1", "0.4.8", "0.3.1", "0.1.8", "0.1.0", "docs-v1.12.0-2016-07-28", "0.0.3", "docs-v1.12.0-2016-08-03", "autorun/1", "debian/0.1.1-1", "docs-v1.12.0-2016-08-03.1", "0.6.7", "0.7.1", "0.5.3", "0.3.4"]}, {"severity": ["high"], "snyk_url": ["https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMHELMHELMPKGPLUGININSTALLER-572401"], "references": ["GHSA Advisory:https://github.com/helm/helm/security/advisories/GHSA-qq3j-xp49-j73f", "GitHub Commit:https://github.com/helm/helm/commit/b6bbe4f08bbb98eadd6c9cd726b08a5c639908b3", "GitHub PR:https://github.com/helm/helm/pull/8317"], "snyk_cwes": ["CWE-22"], "vertex_label": ["SCVE"], "description": ["## Overview\n[github.com/helm/helm/pkg/plugin/installer](https://github.com/helm/helm/tree/master) is a Kubernetes Package Manager.\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip). When installing Helm plugins from a tar archive over HTTP, it is possible for a malicious plugin author to inject a relative\r\npath into a plugin archive, and copy a file outside of the intended directory, or overwrite contents of an arbitrary file where the path location is known.\r\n\r\n### PoC\r\n```\r\nRun helm plugin install https://github.com/snoopysecurity/Public/raw/master/payloads/evil.tar.gz` \r\n\r\nThe evil.tar.gz has a  file called \u201c../../../../../../../../tmp/test.txt\u201d, which when extracted by the helm plugin installer will then move the test.txt file to the temp directory.\r\n\r\n```\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a ../../file.exe location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nUpgrade `github.com/helm/helm/pkg/plugin/installer` to version 3.2.4 or higher.\n## References\n- [GHSA Advisory](https://github.com/helm/helm/security/advisories/GHSA-qq3j-xp49-j73f)\n- [GitHub Commit](https://github.com/helm/helm/commit/b6bbe4f08bbb98eadd6c9cd726b08a5c639908b3)\n- [GitHub PR](https://github.com/helm/helm/pull/8317)\n"], "cvss_scores": [8.8], "snyk_cve_ids": ["CVE-2020-4053"], "modified_date": ["20201105"], "title": ["Arbitrary File Write via Archive Extraction (Zip Slip)"], "snyk_ecosystem": ["golang"], "malicious": [false], "snyk_cvss_v3": ["CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C"], "vuln_commit_date_rules": ["<#2020-06-15T22:39:39Z"], "package_name": ["github.com/helm/helm/pkg/plugin/installer"], "fixed_in": ["3.2.4"], "snyk_vuln_id": ["SNYK-GOLANG-GITHUBCOMHELMHELMPKGPLUGININSTALLER-572401"], "snyk_pvt_vulnerability": [false], "module_name": ["github.com/helm/helm"], "exploit": ["Proof of Concept"], "patch_exists": [""], "fixable": [true], "versions": ["3.0.2", "3.1.0-rc.1", "3.0.0", "3.1.0-rc.3", "3.1.3", "3.0.3", "3.2.1", "3.1.2", "3.1.1", "3.1.0", "3.2.2", "3.2.0", "3.2.0-rc.1", "3.0.1", "3.1.0-rc.2", "3.2.3"]}, {"severity": ["high"], "snyk_url": ["https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGOAAHAAH-559113"], "references": ["GItHub Issue:https://github.com/go-aah/aah/issues/266", "GitHub Commit:https://github.com/go-aah/aah/pull/267/commits/2c8f53fa7d3affbc79a1153773cb9d0607085b01", "GitHub PR:https://github.com/go-aah/aah/pull/267"], "snyk_cwes": ["CWE-23"], "vertex_label": ["SCVE"], "description": ["## Overview\n\n[github.com/go-aah/aah](https://github.com/go-aah/aah) is a Go web framework.\n\n\nAffected versions of this package are vulnerable to Directory Traversal\nvia static file delivery.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with dot-dot-slash (../) sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\n\n## Remediation\n\nUpgrade `github.com/go-aah/aah` to version 0.12.4 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/go-aah/aah/pull/267/commits/2c8f53fa7d3affbc79a1153773cb9d0607085b01)\n\n- [GItHub Issue](https://github.com/go-aah/aah/issues/266)\n\n- [GitHub PR](https://github.com/go-aah/aah/pull/267)\n"], "cvss_scores": [7.5], "modified_date": ["20201105"], "title": ["Directory Traversal"], "snyk_ecosystem": ["golang"], "malicious": [false], "snyk_cvss_v3": ["CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N/E:U/RL:O/RC:C"], "vuln_commit_date_rules": ["<#2020-03-03T09:27:03Z"], "package_name": ["github.com/go-aah/aah"], "fixed_in": ["0.12.4"], "snyk_vuln_id": ["SNYK-GOLANG-GITHUBCOMGOAAHAAH-559113"], "snyk_pvt_vulnerability": [true], "module_name": ["github.com/go-aah/aah"], "exploit": ["Unproven"], "patch_exists": [""], "fixable": [true], "versions": ["0.12.3", "0.11.1", "0.6", "0.10", "0.12.2", "0.11.4", "0.11.2", "0.11.0", "0.5.1", "0.11.3", "0.4.1", "0.2", "0.12.1", "0.8", "0.5", "0.3", "0.10.1", "0.9", "0.7", "0.4", "0.12.0", "0.1"]}, {"severity": ["high"], "snyk_url": ["https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSQUAREGOJOSE-540149"], "references": ["GitHub Commit:https://github.com/square/go-jose/commit/2c5656adca9909843c4ff50acf1d2cf8f32da7e6", "HackerOne Report:https://hackerone.com/reports/169629", "OSS security Advisory:http://www.openwall.com/lists/oss-security/2016/11/03/1"], "snyk_cwes": ["CWE-284"], "vertex_label": ["SCVE"], "description": ["## Overview\n[github.com/square/go-jose](https://github.com/square/go-jose) is a Package that aims to provide an implementation of the Javascript Object Signing and Encryption set of standards.\n\nAffected versions of this package are vulnerable to Signature Validation Bypass. The go-jose library supports messages with multiple signatures. However, when validating a signed message the API did not indicate which signature was valid, which could potentially lead to confusion. For example, users of the library might mistakenly read protected header values from an attached signature that was different from the one originally validated.\n## Remediation\nUpgrade `github.com/square/go-jose` to version 1.1.0 or higher.\n## References\n- [GitHub Commit](https://github.com/square/go-jose/commit/2c5656adca9909843c4ff50acf1d2cf8f32da7e6)\n- [HackerOne Report](https://hackerone.com/reports/169629)\n- [OSS security Advisory](http://www.openwall.com/lists/oss-security/2016/11/03/1)\n"], "cvss_scores": [7.5], "snyk_cve_ids": ["CVE-2016-9122"], "modified_date": ["20201105"], "title": ["Signature Validation Bypass"], "snyk_ecosystem": ["golang"], "malicious": [false], "snyk_cvss_v3": ["CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"], "vuln_commit_date_rules": ["<#2016-08-31T18:56:16Z"], "package_name": ["github.com/square/go-jose"], "fixed_in": ["1.1.0"], "snyk_vuln_id": ["SNYK-GOLANG-GITHUBCOMSQUAREGOJOSE-540149"], "snyk_pvt_vulnerability": [false], "module_name": ["github.com/square/go-jose"], "exploit": ["Not Defined"], "patch_exists": [""], "fixable": [true], "versions": ["1.0.5", "1.0.4", "1.0.1", "1.0.0", "1.0.2", "1.0.3"]}]